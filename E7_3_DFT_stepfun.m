% DFT of a step function% WARNING : the code is for demo purpose%           it is not an efficient codeclear allclose allclc% create the step functiondx = 0.001;L  = 1;x  = [dx:dx:L]'; % generate the x-axis of time,                 %   this also works : x=[0:dx:L-dx]'                 %   Function is periodic,                  %   so do not use the bounds twice.N=length(x);n=[0:N-1]';% generate the step function%y=ones(N,1);     % first, put ones everywhere%y(1:N/2)=0 ;     % then, zero out the first half% example of a smooth function%y = 10+5*cos(2*pi*5*x) + 2.3*sin(2*pi*15*x);%-----------------------------------------------------------%% note : we will see that the fourier series of %        functions with abrupt changes%        and / or discontinuity exhibit wiggles %        --> Gibbs phenomenon%% try some smooth continuous functions -> no wiggles% e.g. y = 10+5*cos(2*pi*5*x) + 2.3*sin(2*pi*15*x);%%-----------------------------------------------------------% plot functionfigure(1);% if you like, set position of figure on screen% set(gcf,'position',[100 200 400 400]);  plot(x,y,'k','linewidth',2)xlabel('x')ylabel('y=f(x)')hold on;% compute individual componentsFS     = zeros(N,1);     % allocate matrix beforehandck_all = zeros(N,1);% compute k0-component aka mean valueck_all(1) = 1/N * sum(y); % recall 1/N can be put either in ck or FSFS(:,1)   = ck_all(1)*exp(i*2*pi*0*n(1)/N);%compute the next 100 components for k=1:100    ck=(sum(y.*(exp(-i*2*pi*(k)*n/N))));     ck= 1/N*ck; % this is merely a scale factor                  % can be either used in the computation                  % of F_k(ck) or f_n. But NOT both!!                  % I like to include here because it gives                  % the correct amplitude    ck= 2*ck ; % to obtain the full spectra    % note : in complex fourier series    %    we have also negative freq.     %    in other words we obtain here one-sided     %    spectra for full we need to add up the neg freq.    FS(:,k+1)  = ck * (exp(i*2*pi*(k)*n/N));    ck_all(k+1)= ck;     %NOT an efficient code!!  endFStotal = sum(FS,2);% plot several individual Fourier-series component% including a_0figure(2)set(gcf,'position',[500 200 400 400])for n=[1:6]      i=i+1;    subplot(6,1,n)     plot(x,FS(:,n),'linewidth',2)     title(['k = ' num2str(n-1)])endxlabel('x')% call the figure, where the original function was plotted% then, plot the sum of several terms % and the sum of all computed terms (k=0 to 100).figure(1)% plot the sum from k=0 to 5plot(x,sum(FS(:,1:6),2),'--b','linewidth',1.5)plot(x,FStotal,'--r','linewidth',1.5)legend('exact','sum of k=0 to 5', 'sum of k=0 to 100')set(legend,'location','southeast')%-----------------------------------------------------------% Approximation gets better by adding sine (cosine)% waves of higher and higher frequencies, % but notice the wiggles!% Try a smooth function.%-----------------------------------------------------------%-----------------------------------------------------------% Recall : ck values are complex numbers%          ck contain two information amplitude and phase/angle% plot amplitude and phasefigurefreq = [0:N-1]/L;subplot(1,2,1); plot(freq,abs(ck_all),'o-')xlim([0 20])subplot(1,2,2)plot(freq,angle(ck_all),'o-')xlim([0 20])