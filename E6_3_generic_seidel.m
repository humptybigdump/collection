clear allclose allclc% Solve [A][x]=[b]% using Gauss-Seidel% Example convergenceA = [-5 2 1; 1 6 2; 3 -3 8];b = [15 25 20]';% Example no convergenceA = [-5 2 1; 3 -3 8; 1 6 2];b = [15 20 25]';% using backslash commandx_matlab=A\b%------% gauss-seidel generic iteration rule:% xnew = Qinv * b - Qinv * U * xold % where we define A = L + D + U and Q = D + L  %------D = diag(diag(A)); % diagonal part of AU = triu(A)-D;     % upper triangular without diagonalQ = tril(A);       % lower triangular with diagonalQinv=inv(Q);       % inverse of QQinvU = Qinv*U;    % gauss-seidel iteration matrixQinvb = Qinv*b;xold=[0;0;0];      % initial guessessmall=1e-6;        % toleranceitermax=1000;      % max iteration%check square matrix[m,n]=size(A);if m~=n    error('Matrix A must be a square matrix !')end%check diagonal dominancefor i=1:m    if abs(A(i,i)) < sum(abs(A(i,:)),2)-abs(A(i,i))        error(' Matrix A is not diagonal dominant !')    endend% check spectral radius of Qinv*U - convergence criterionrho = max(abs(eig(QinvU)))if rho > 1    error('spectral radius > 1')end% do iterationxnew=zeros(m,1);iter=0;err=inf; % put a large numberwhile err > small && iter < itermax    xnew = Qinvb - QinvU * xold;    err = max(abs(xnew-xold));    xold=xnew;    iter=iter+1;    %xgauss(iter,:)=xnew;end disp(['Spectral radius = ' num2str(rho,'%2.2f')])disp(['Number of iterations = ' num2str(iter)])x_gaussseidel = xnew%plot(xgauss)