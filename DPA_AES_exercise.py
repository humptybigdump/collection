import numpy as np
import pandas as pd

#The SBOX from AES that is explicitly used in the SubBytes Subroutine.
sbox = [
    # 0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f 
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, # 0
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, # 1
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, # 2
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, # 3
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, # 4
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, # 5
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, # 6
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, # 7
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, # 8
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, # 9
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, # a
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, # b
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, # c
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, # d
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, # e
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  # f
]

#This function computes the hypothetical result on the target during the SubBytes subroutine. 
#If inputdata and key correspond with the values from the attacked target, then this function returns also the same result that was computed on the target.
def aes_internal(inputdata, key):
    return sbox[inputdata ^ key]

#Helper Function to get the ith-bit of value. i-th_bit = 1 is the LSB.
def get_bit(value, ith_bit):
    if value & (1<<ith_bit):
        return 1
    else:
        return 0

def aes_leakage_guess(keyguess, inputdata, bit):
    return get_bit(aes_internal(keyguess, inputdata), bit)

#Computes that mean trace.
def mean(X):
    return np.sum(X, axis=0)/len(X)


#---------------------- Setup ----------------------#

#Contains all 2000 traces from the CSV-file.
traces = []

#Contains all 2000 plaintexts that are encrypted during the recorded traces.
mesg_ar = []

#Placeholder Array for all 256 guesses of possible bytes
guesses = [0] * 256

#This array is going to include all of the traces with LSB of the SBOX-Lookup being 0.
traces_0 = []

#This array is going to include all of the traces with LSB of the SBOX-Lookup being 1.
traces_1 = []


#-----------!!! Make sure that the .csv files are in the same folder as this script !!!--------------- 
my_df_traces = pd.read_csv('2k_traces_AES.csv',header = None)
my_df_data = pd.read_csv('2k_input_AES.csv',header = None)
traces = my_df_traces.to_numpy()
mesg_ar = my_df_data.to_numpy()

#---------------------- DPA ----------------------#

# Make a guess for the first byte of the 128-bit AES-key 
for guess in range (1,256):
    # guess is your hypothesis and you want to test it. 
    for i in range(2000):   
        ############# Task 1: Given the i-th trace and the according first byte of the i-th 128-bit plaintext in mesg_ar[i][0] you want to compute the hypothetical leakage of the LSB of the first SBOX-lookup. 
        #
        # hypothetical_LSB = ...
        #
        #############

        ############# Task 2: Given the hypothetical LSB(SBOX(guess XOR mesg_ar[i][0])) you want to add the current trace to the Group traces_LSB.
        #
        #if(hypothetical_LSB ... ):
        #  traces_0.append(...)  
        #else:
        #  traces_1.append(...)
        #  
        #############

    ############# Task 3: After the grouping step is done. The groups traces_0 and traces_1 are filled. Now you want to compute the means of each of the groups.                
    # mean_trace_0 = ...
    # mean_trace_1 = ...
    #############

    ############# Task 4: Compute the difference between the groups
    # mean_diff = ...
    #############

    # Store the absolute maximum value of the differences (the peak!) for each guess. (Spoiler: The guess with the highest peak will be the correct key byte)
    # guesses[guess]= max(abs(mean_diff))

    # Dont forget to reset the groups for each guess.
    #traces_0 = []
    #traces_1 = []

# You should see a clear winner!
sorted_list = np.argsort(guesses)[::-1]
for guess in sorted_list[0:50]:
    print("Key Guess {} with {:04f} max peak".format(guess, guesses[guess]))

# Bonus Task 5: Test the DPA-attack on the remaining 15 bytes of the key or any other bits of the sbox output. (The function aes_leakage_guess(keyguess, inputdata, bit) allows to vary the bit parameters -> bit=1 ist the LSB) 