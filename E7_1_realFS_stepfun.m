% fourier series of a step function% Note : the code is for demo purpose%        it is not an efficient code clear allclose allclcformat long% create the step functiondx = 0.001;L  = 1;x  = [dx:dx:L]'; % generate the x-axis of time,                 %   this also works : x=[0:dx:L-dx]'                 %   Function is periodic,                  %   so do not use the bounds twice.N=length(x);% generate the step functiony=ones(N,1);     % first, put ones everywherey(1:N/2)=0 ;     % then, zero out the first half%%-----------------------------------------------------------%% note : we will see that the fourier series of %        functions with abrupt changes%        and / or discontinuity exhibit wiggles %        --> Gibbs phenomenon%% try some smooth continuous functions -> no wiggles% e.g. % y = sin(2*pi*5*x) + sin(2*pi*15*x);%%-----------------------------------------------------------% plot functionfigure(1);% if you like, set position of figure on screen% set(gcf,'position',[100 200 400 400]);  plot(x,y,'b','linewidth',2)axis([-0.1 1.1 -0.1 1.1])xlabel('x')ylabel('f(x)')hold on;% compute individual components% first compute the k=0 component aka mean valuea0 = 2/L * (sum(y))*dx;FSmode(:,1)=a0/2 + zeros(N,1); % this generates a vector                                % in which all elements = a0/2  %compute the next 100 components %append the results to the matrix FSmodefor k=1:100    ak=2/L * sum(y.*cos(2*pi*k*x/L))*dx    bk=2/L * sum(y.*sin(2*pi*k*x/L))*dx    % additional info:    % In matlab, the built-in function dot(y1,y2)    % can be used to compute the inner product between     % the functions y1 and y2, so that    %ak=2/L * dot(y,cos(2*pi*k*x/L))*dx     %bk=2/L * dot(y,sin(2*pi*k*x/L))*dx    FSmode(:,k+1) = ak * cos(2*pi*k*x/L) + ...                    bk * sin(2*pi*k*x/L);endFStotal = sum(FSmode,2);% plot several individual Fourier-series component% including a_0figure(2)set(gcf,'position',[500 200 400 400])for n=[1:6]      i=i+1;    subplot(6,1,n)     plot(x,FSmode(:,n),'linewidth',2)     title(['k = ' num2str(n-1)])endxlabel('x')% call the figure, where the original function was plotted% then, plot the sum of several terms % and the sum of all computed terms (k=0 to 100).figure(1)% plot the sum from k=0 to 5plot(x,sum(FSmode(:,1:6),2),'--k','linewidth',1.5)plot(x,FStotal,'--r','linewidth',1.5)legend('exact','sum of k=0 to 5', 'sum of k=0 to 100')set(legend,'location','southeast')%-----------------------------------------------------------% Approximation gets better with adding sine (cosine)% waves of higher and higher frequencies, % but notice the wiggles!% Try a smooth function.%-----------------------------------------------------------