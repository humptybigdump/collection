clear allclose allclc% Solve [A][x]=[b]% using the Jacobi iteration% Example convergenceA = [-5 2 1; 1 6 2; 3 -3 8];b = [15 25 20]';% Example no convergence%A = [-5 2 1; 3 -3 8; 1 6 2];%b = [15 20 25]';xold=[0;0;0];      % initial guessessmall=1e-6;        % toleranceitermax=500;       % max iteration% using backslash commandx_matlab=A\b%------% jacobi generic iteration rule:% xnew = Dinv * b - Dinv * R * xold%------D = diag(diag(A));  % diagonal part of ADinv = inv(D);      % inverse of DR = A - D;          % the rest of A (R = A - D = L + U)DinvR = Dinv*R;     % jacobi iteration matrixDinvb = Dinv*b;% --- we can add some checking% --- before we start to iteratechecksquare = true;checkdiag = true;checkspectralradius = true;% ---if checksquare    [m,n]=size(A);    if m~=n        error('Matrix A must be a square matrix !')    endend% ---if checkdiag    % check diagonal dominance    for i=1:length(A)        if abs(A(i,i)) < sum(abs(A(i,:)),2)-abs(A(i,i))            disp(' Matrix A is not diagonally dominant !')        end    end    % activate the line below for performing partial pivoting    %[A,b]=parpiv(A,b); %see function parpiv at the end of scriptend% ---if checkspectralradius    % compute spectral radius - convergence criterion    rho = max(abs(eigs(DinvR)))    if rho >=1        error('Spectral radius > 1, no convergence')    endend% ---% ---% do iteration% ---xnew=zeros(length(A));ticiter=0;err=inf; % put a large numberwhile err > small && iter < itermax    xnew = Dinvb - DinvR * xold;    err = max(abs(xnew-xold));    xold=xnew;    iter=iter+1;    xjac(iter,:)=xnew;endtoc% ---% print outputdisp(['Number of iterations = ' num2str(iter)])x_jacobi=xnewmax_error=err% Plot the result of each iterationplot(xjac)xlabel('iteration')ylabel('x(iter)')legend('x_1','x_2','x_3')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [A,b] = parpiv(A,b)disp(' Partial pivoting performed !! ')[m,n]=size(A);c=[A b]; %augmented matrixfor i=1:m    %if abs(A(i,i)) < sum(abs(A(i,:)),2)-abs(A(i,i))    for jj=i+1:n % jj is row under pivot        if abs(c(jj,i)) > abs(c(i,i))            %disp('We need to swap the rows')            %i            %jj            c_keep = c(jj,:);            c(jj,:)=c(i,:);            c(i,:)=c_keep;        end %endif    end %endfor    %end %endif    A=c(:,1:n);    b=c(:,n+1);end %endforend