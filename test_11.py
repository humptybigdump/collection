#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 18 13:49:35 2022

@author: max
"""
import unittest
import numpy as np
import sys
sys.path.append('..')
from ex_11 import *

def element_wise_function(function):
    def inner(array, *args, **kwargs):
        shape = array.shape
        flat = array.flatten()
        result = np.array([function(e, *args, **kwargs) for e in flat])
        return result.reshape(shape)
    return inner

value_of_array = element_wise_function(MultiparameterPolynomial.value)

class TestLinElement2D(unittest.TestCase):
    
    def test_ref_element2D(self):
        refLin2D = ReferenceElement2D(2)    
        N = refLin2D.get_N()    
        ref_N = np.array([[0.0833333333333333, 0.250000000000000, 0.166666666666667, 0.500000000000000, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0.0833333333333333, 0.250000000000000, 0.166666666666667, 0.500000000000000]])    
        assert np.allclose(value_of_array(N, [1/3, 1/2]), ref_N)
        
        ref_N_grad = np.array([[[-0.125000000000000, -0.166666666666667],
      [-0.375000000000000, 0.166666666666667],
      [0.125000000000000, -0.333333333333333],
      [0.375000000000000, 0.333333333333333],
      [0, 0],
      [0, 0],
      [0, 0],
      [0, 0]],
    
     [[0, 0],
      [0, 0],
      [0, 0],
      [0, 0],
      [-0.125000000000000, -0.166666666666667],
      [-0.375000000000000, 0.166666666666667],
      [0.125000000000000, -0.333333333333333],
      [0.375000000000000, 0.333333333333333]]])
        N_grad = refLin2D.get_N_grad()
        assert np.allclose(value_of_array(N_grad, [1/3, 1/2]), ref_N_grad)
        
    def test_affine_element2D(self):
        refLin2D = ReferenceElement2D(2)
        lin_elem = AffineElement([0, 1, 2, 3], refLin2D, np.array([0, 0]), np.array([[1, 0], [0, 1]]),
                                 stiffness, 
                                 thickness=1)
        stiffness_matrix = lin_elem.K
        reference_stiffness_matrix = np.array([[121153.84615385,  20192.30769231, -80769.23076923, -60576.92307692,  50480.76923077, -10096.15384615,  10096.15384615, -50480.76923077],
     [ 20192.30769231, 121153.84615385, -60576.92307692, -80769.23076923,  10096.15384615, -50480.76923077,  50480.76923077, -10096.15384615],
     [-80769.23076923, -60576.92307692, 121153.84615385,  20192.30769231, -10096.15384615,  50480.76923077, -50480.76923077,  10096.15384615],
     [-60576.92307692, -80769.23076923,  20192.30769231, 121153.84615385, -50480.76923077,  10096.15384615, -10096.15384615,  50480.76923077],
     [ 50480.76923077,  10096.15384615, -10096.15384615, -50480.76923077, 121153.84615385, -80769.23076923,  20192.30769231, -60576.92307692],
     [-10096.15384615, -50480.76923077,  50480.76923077,  10096.15384615, -80769.23076923, 121153.84615385, -60576.92307692,  20192.30769231],
     [ 10096.15384615,  50480.76923077, -50480.76923077, -10096.15384615,  20192.30769231, -60576.92307692, 121153.84615385, -80769.23076923],
     [-50480.76923077, -10096.15384615,  10096.15384615,  50480.76923077, -60576.92307692,  20192.30769231, -80769.23076923, 121153.84615385]])
        assert np.allclose(stiffness_matrix,reference_stiffness_matrix)

