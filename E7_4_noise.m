% example of fft applicationclear allclose allclc%--------------------------------------------------------------------------% generate a signal with two frequencies : 45 and 180 Hz% y = 2 + 1.5*sin(2*pi*45*t) + 3*sin(2*pi*180*t);% notice : we sum two sin waves %   having frequencies of 45 and 180 Hz and%   amplitudes of 1.5 and 3%--------------------------------------------------------------------------N = 2^10;       % length (amount) of data, fft performs best with 2^n samples.L = 1;          % time periodsr= N/L;        % sampling ratedt= 1/sr;       % Delta tt = (0:N-1)*dt; % generate x-axis of time,                 %   note : function is assumed to be periodic,                 %     so do not use the bounds twice!%t = dt:dt:L;   %     either definition of t shown here works.f = (0:N-1)/L;  % generate x-axis of frequencies f2=1./t;% define the functiony = 2+1.5*sin(2*pi*45*t) + 3*sin(2*pi*180*t); % play sound%sound(y,sr)% plot the signal figure(1)plot(t,y,'b','LineWidth',1.2)xlim([0 0.2])xlabel('t')ylabel('y')hold on%------------------------------------------------------------------% Transform the data to frequency domain.% We should find the exact amplitudes,% at the correct frequencies!%--------------------------------------------------------------------------%%y=y-mean(y);yfft = fft(y);   % compute the fft of the signal                  % have a look at the values of yfft ...                 %   recall :                 %   they are in complex numbers form                 %   carying information of                  %   amplitude and phase%            yfftn= yfft/N;       % normalized fft signal, note                     %   different scaling are often used.                     %   here, when scaling with N, we get                      %   the correct amplitudesampli = abs(yfftn);  % compute magnitude of each frequency                     % note : in complex fourier series                     %   we have also negative frequencies.                      %   thus, to obtain the full spectra                     %   we need to add up the neg freq.                     %   so we need to multiply all by 2,                      %   except for k=0. ampli = ampli*2;     % multiply by 2 to obtain the full amplitude andampli(1)=ampli(1)/2; % correct back the amplitude for k=0.plot_range = 1:floor(N/2); % we only want to plot the first half psd = (yfftn).*(conj(yfftn));    % compute power spectrum (how much power in each frequency)%psd = abs(yfftn).^2;        % gives the same answervar(y)intpsd1=trapz(f(2:end-1),psd(2:end-1)) %notice omit 0th-harmonic% plot amplitude and psdfigure(2)subplot(1,2,1)plot(f(plot_range),ampli(plot_range),'o-') ; xlabel('f')title('amplitude')grid on   % Notice that the correct frequencies (45 and 180Hz) % and amplitudes (2, 1.5 and 3) are found.%returnsubplot(1,2,2)plot(f(plot_range),psd(plot_range)) ;  % note we can see which frequencies contain the most power.xlabel('f')title('psd')grid on   %return%--------------------------------------------------------------------------%--------------------------------------------------------------------------%% let us add some random noise to the originial signal%%--------------------------------------------------------------------------ynois = y + 3.5*randn(size(t));% plot on top of the original signalfigure(1)hold onplot(t,ynois,'r')         legend('original','noisy')% play sound %sound(ynois,sr)%return%--------------------------------------------------------------------------%% compute fft to transform into the frequency domain,% and analyze the noisy signal. %%--------------------------------------------------------------------------%ynois=ynois-mean(ynois);yfft_nois = fft(ynois,N);                  % computes fft of noisy signalyfft_nois_n= yfft_nois/N;                  % normalized fft of noisy signalampli_nois = 2*abs(yfft_nois_n);           % compute magnitude of each frequency                                            % multiply by 2 to obtain the                                           % whole  spectrum, except for                                           % k=0ampli_nois(1)=ampli_nois(1)/2;                                                                                      psd_nois = yfft_nois_n.*conj(yfft_nois_n); % compute power spectrum (power in each frequency)var(ynois)trapz(f(2:end-1),psd_nois(2:end-1))return%f-axis same as above%plot_range same as abovefigure(3);subplot(1,2,1)plot(f(plot_range),ampli_nois(plot_range),'r')hold ontitle('amplitude')xlabel('frequency (Hz)')subplot(1,2,2)plot(f(plot_range),psd_nois(plot_range),'r')hold ontitle('power spectral density')xlabel('frequency (Hz)')%pause%--------------------------------------------------------------------------%% using the knowledge obtained from the above analysis% psd (or amplitude), we can filter out the noise%%--------------------------------------------------------------------------% psdpsd_filt  = psd_nois;            % copy psd_nois to psd_filtidx_large = psd_filt > 0.15;     % find indices of all freqs with large powerpsd_filt  = psd_filt.*idx_large; % remove (zero out) all other frequenciesfigure(3);subplot(1,2,1)plot(f(plot_range),psd_filt(plot_range),'g') legend('noisy','filtered')%--------------------------------------------------------------------------%% now, let us transform the filtered function back % to the time-domain.% to do that we use the inverse FFT.% we only want the filtered frequencies, so :%%--------------------------------------------------------------------------%yfft_filt = yfft_nois;             % first copy the yfft of the noisy signalyfft_filt = yfft_filt.*idx_large;  % then zero out components having small                                   %   Fourier coefficients % finally perform inverse FFT% to get filtered time-domain signalyfilt = ifft(yfft_filt);           figure(4)plot(t,y,'k','LineWidth',2)hold onplot(t,ynois,'b','LineWidth',1.5)plot(t,yfilt,'-r','LineWidth',0.75)legend('original','noisy','filtered')xlim([0 0.1])xlabel('t')ylabel('y')%Notice : most of the noise are filtered out.%sound(y,sr)%sound(yfilt,sr)